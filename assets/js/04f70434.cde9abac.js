"use strict";(self.webpackChunkroadmap=self.webpackChunkroadmap||[]).push([[2831],{9466:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"01-foundations","title":"Foundations of Backend Engineering","description":"A senior backend engineer\'s expertise is built on a deep and solid understanding of the fundamentals. Before diving into complex architectural patterns or specific frameworks, it\'s crucial to have a firm grasp of how the internet works, the principles of good software design, and the core tenets of security. This section lays that essential groundwork, providing not just the what, but the why these concepts are critical for building robust, scalable, and secure systems.","source":"@site/docs/01-foundations.mdx","sourceDirName":".","slug":"/foundations","permalink":"/roadmap/docs/foundations","draft":false,"unlisted":false,"editUrl":"https://github.com/alishahidi/roadmap/tree/main/docs/01-foundations.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"01-foundations","slug":"/foundations","sidebar_position":1,"title":"Foundations of Backend Engineering"},"sidebar":"roadmapSidebar","next":{"title":"API Design & Development","permalink":"/roadmap/docs/api-design"}}');var i=s(4848),t=s(8453);const a={id:"01-foundations",slug:"/foundations",sidebar_position:1,title:"Foundations of Backend Engineering"},o=void 0,l={},c=[{value:"Networking and the Web",id:"networking-and-the-web",level:2},{value:"DNS (Domain Name System)",id:"dns-domain-name-system",level:3},{value:"HTTP/HTTPS",id:"httphttps",level:3},{value:"Programming Paradigms",id:"programming-paradigms",level:2},{value:"Object-Oriented Programming (OOP)",id:"object-oriented-programming-oop",level:3},{value:"The Four Pillars",id:"the-four-pillars",level:4},{value:"SOLID Principles with Code Examples",id:"solid-principles-with-code-examples",level:4},{value:"Functional Programming (FP)",id:"functional-programming-fp",level:3},{value:"Core Concepts with Examples",id:"core-concepts-with-examples",level:4},{value:"Concurrency &amp; Threading",id:"concurrency--threading",level:2},{value:"Core Concepts",id:"core-concepts",level:3},{value:"Synchronization Mechanisms",id:"synchronization-mechanisms",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Core Web Security Fundamentals",id:"core-web-security-fundamentals",level:2},{value:"Common Security Vulnerabilities with Examples",id:"common-security-vulnerabilities-with-examples",level:3},{value:"SQL Injection",id:"sql-injection",level:4},{value:"Node.js - DANGEROUS!",id:"nodejs---dangerous",level:5},{value:"Python - DANGEROUS!",id:"python---dangerous",level:5},{value:"Node.js - SAFE",id:"nodejs---safe",level:4},{value:"Python - SAFE",id:"python---safe",level:4},{value:"C# Entity Framework - SAFE",id:"c-entity-framework---safe",level:4},{value:"Cross-Site Scripting (XSS) Prevention",id:"cross-site-scripting-xss-prevention",level:4},{value:"Input Validation Example",id:"input-validation-example",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["A senior backend engineer's expertise is built on a deep and solid understanding of the fundamentals. Before diving into complex architectural patterns or specific frameworks, it's crucial to have a firm grasp of how the internet works, the principles of good software design, and the core tenets of security. This section lays that essential groundwork, providing not just the what, but the ",(0,i.jsx)(n.em,{children:"why"})," these concepts are critical for building robust, scalable, and secure systems."]}),"\n",(0,i.jsx)(n.h2,{id:"networking-and-the-web",children:"Networking and the Web"}),"\n",(0,i.jsx)(n.p,{children:"At its core, backend development is about communication over a network. A senior engineer doesn't just use HTTP; they understand how it works. This knowledge is invaluable for debugging complex issues, optimizing performance, and making informed architectural decisions."}),"\n",(0,i.jsx)(n.h3,{id:"dns-domain-name-system",children:"DNS (Domain Name System)"}),"\n",(0,i.jsx)(n.p,{children:"Before a browser can send a request to your server, it needs to know its IP address. DNS is the phonebook of the internet, translating human-friendly domain names into IP addresses."}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant User as User's Browser\n    participant Resolver as DNS Resolver\n    participant Root as Root Server\n    participant TLD as .com TLD Server\n    participant Auth as Authoritative NS\n\n    User->>Resolver: Where is example.com?\n    Resolver->>Root: Where is example.com?\n    Root--\x3e>Resolver: I don't know, but ask the .com TLD server.\n    Resolver->>TLD: Where is example.com?\n    TLD--\x3e>Resolver: I don't know, but ask the Authoritative NS for example.com.\n    Resolver->>Auth: Where is example.com?\n    Auth--\x3e>Resolver: example.com is at 93.184.216.34\n    Resolver--\x3e>User: Here is the IP: 93.184.216.34"}),"\n",(0,i.jsx)(n.h3,{id:"httphttps",children:"HTTP/HTTPS"}),"\n",(0,i.jsx)(n.p,{children:"The Hypertext Transfer Protocol is the language of the web. A deep understanding is essential."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Request/Response Cycle:"})," An HTTP request from a client has a method (verb), headers, and an optional body. The server processes this and returns a response with a status code, headers, and an optional body."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Idempotent Methods:"})," An operation is idempotent if making it multiple times has the same effect as making it once. ",(0,i.jsx)(n.code,{children:"GET"}),", ",(0,i.jsx)(n.code,{children:"PUT"}),", and ",(0,i.jsx)(n.code,{children:"DELETE"})," are idempotent. ",(0,i.jsx)(n.code,{children:"POST"})," is not. Understanding this is key to designing predictable APIs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"HTTPS & TLS:"}),' Transport Layer Security (TLS) is the protocol that provides the "S" in HTTPS. It uses public-key cryptography to establish a secure, encrypted connection between the client and server, protecting against eavesdropping and Man-in-the-Middle (MITM) attacks.']}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Deep Dive: Resources",type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://hpbn.co/",children:["\ud83d\udcc4 ",(0,i.jsx)(n.strong,{children:"High Performance Browser Networking"})," by Ilya Grigorik (O'Reilly)"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://www.youtube.com/watch?v=s_h0S8H1mgg",children:["\u25b6\ufe0f ",(0,i.jsx)(n.strong,{children:"What happens when you type a URL in your browser?"})," (Video)"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview",children:["\ud83d\udcc4 ",(0,i.jsx)(n.strong,{children:"An overview of HTTP"})," (MDN Web Docs)"]})}),"\n"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"programming-paradigms",children:"Programming Paradigms"}),"\n",(0,i.jsx)(n.p,{children:"How you structure your code is fundamental. A senior engineer should be proficient in multiple paradigms and know when to apply each."}),"\n",(0,i.jsx)(n.h3,{id:"object-oriented-programming-oop",children:"Object-Oriented Programming (OOP)"}),"\n",(0,i.jsx)(n.p,{children:"OOP models the real world using objects and classes. It's the dominant paradigm in many backend languages like Java and C#."}),"\n",(0,i.jsx)(n.h4,{id:"the-four-pillars",children:"The Four Pillars"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encapsulation:"})," Bundling data and methods together while hiding internal implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Abstraction:"})," Hiding complex implementation details behind simple interfaces"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inheritance:"})," Creating new classes based on existing ones"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Polymorphism:"})," Objects of different types responding to the same interface"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"solid-principles-with-code-examples",children:"SOLID Principles with Code Examples"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"SOLID Principles implementations"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Single Responsibility Principle (SRP)"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// \u274c Bad: Class has multiple responsibilities\nclass User {\n    private String name;\n    private String email;\n    \n    public void save() { /* database logic */ }\n    public void sendEmail() { /* email logic */ }\n    public String generateReport() { /* reporting logic */ }\n}\n\n// \u2705 Good: Each class has one responsibility\nclass User {\n    private String name;\n    private String email;\n    // getters and setters only\n}\n\nclass UserRepository {\n    public void save(User user) { /* database logic */ }\n}\n\nclass EmailService {\n    public void sendEmail(User user, String message) { /* email logic */ }\n}\n\nclass UserReportGenerator {\n    public String generateReport(User user) { /* reporting logic */ }\n}\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Open/Closed Principle (OCP)"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Good: Open for extension, closed for modification\npublic abstract class PaymentProcessor\n{\n    public abstract void ProcessPayment(decimal amount);\n}\n\npublic class CreditCardProcessor : PaymentProcessor\n{\n    public override void ProcessPayment(decimal amount)\n    {\n        // Credit card processing logic\n    }\n}\n\npublic class PayPalProcessor : PaymentProcessor\n{\n    public override void ProcessPayment(decimal amount)\n    {\n        // PayPal processing logic\n    }\n}\n\n// Adding new payment method doesn't modify existing code\npublic class CryptoProcessor : PaymentProcessor\n{\n    public override void ProcessPayment(decimal amount)\n    {\n        // Cryptocurrency processing logic\n    }\n}\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Dependency Inversion Principle (DIP)"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\n# \u2705 Good: Depend on abstractions, not concretions\nclass EmailSender(ABC):\n    @abstractmethod\n    def send_email(self, to: str, subject: str, body: str):\n        pass\n\nclass SMTPEmailSender(EmailSender):\n    def send_email(self, to: str, subject: str, body: str):\n        # SMTP implementation\n        pass\n\nclass SendGridEmailSender(EmailSender):\n    def send_email(self, to: str, subject: str, body: str):\n        # SendGrid API implementation\n        pass\n\nclass NotificationService:\n    def __init__(self, email_sender: EmailSender):\n        self._email_sender = email_sender  # Depends on abstraction\n    \n    def notify_user(self, user_email: str, message: str):\n        self._email_sender.send_email(user_email, "Notification", message)\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"functional-programming-fp",children:"Functional Programming (FP)"}),"\n",(0,i.jsx)(n.p,{children:"FP treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data."}),"\n",(0,i.jsx)(n.h4,{id:"core-concepts-with-examples",children:"Core Concepts with Examples"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Functional Programming examples"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pure Functions"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Pure function: same input always produces same output, no side effects\nfunction calculateTotal(items) {\n    return items.reduce((total, item) => total + item.price, 0);\n}\n\n// \u274c Impure function: modifies external state, unpredictable output\nlet discount = 0.1;\nfunction calculateTotalWithDiscount(items) {\n    const total = items.reduce((sum, item) => sum + item.price, 0);\n    discount += 0.01; // Side effect: modifies external state\n    return total * (1 - Math.random() * discount); // Unpredictable output\n}\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Immutability"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# \u2705 Immutable approach\ndef add_item_to_cart(cart_items, new_item):\n    return cart_items + [new_item]  # Returns new list, original unchanged\n\n# \u274c Mutable approach\ndef add_item_to_cart_mutable(cart_items, new_item):\n    cart_items.append(new_item)  # Modifies original list\n    return cart_items\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Higher-Order Functions"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Java 8+ with functional programming concepts\nimport java.util.function.Function;\nimport java.util.function.Predicate;\n\npublic class OrderProcessor {\n    // Higher-order function: takes function as parameter\n    public static <T, R> List<R> processOrders(\n        List<T> orders, \n        Function<T, R> processor\n    ) {\n        return orders.stream()\n            .map(processor)\n            .collect(Collectors.toList());\n    }\n    \n    // Usage examples\n    public static void main(String[] args) {\n        List<Order> orders = getOrders();\n        \n        // Transform orders to invoices\n        List<Invoice> invoices = processOrders(orders, order -> {\n            return new Invoice(order.getId(), order.getTotal());\n        });\n        \n        // Filter and transform\n        List<String> expensiveOrderIds = orders.stream()\n            .filter(order -> order.getTotal() > 1000)\n            .map(Order::getId)\n            .collect(Collectors.toList());\n    }\n}\n"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why FP Matters for Backend Systems:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Predictability:"})," Pure functions are easier to test and debug"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Concurrency:"})," Immutable data eliminates race conditions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Composability:"})," Small, pure functions can be easily combined"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fault Tolerance:"})," Less shared state means fewer points of failure"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Deep Dive: Resources",type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://code-maze.com/solid-principles-csharp/",children:["\ud83d\udcc4 ",(0,i.jsx)(n.strong,{children:"SOLID Principles for C# Developers"})," (Code-Maze)"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://www.youtube.com/watch?v=pDbcC-xSat4",children:["\u25b6\ufe0f ",(0,i.jsx)(n.strong,{children:"Functional Programming in 40 Minutes"})," (Video)"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://martinfowler.com/eaaCatalog/",children:["\ud83d\udcc4 ",(0,i.jsx)(n.strong,{children:"Martin Fowler on Design Patterns"})]})}),"\n"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"concurrency--threading",children:"Concurrency & Threading"}),"\n",(0,i.jsx)(n.p,{children:"Understanding concurrency is crucial for building high-performance backend systems. Senior developers must master these concepts to build systems that can handle multiple requests efficiently."}),"\n",(0,i.jsx)(n.h3,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Concurrency vs. Parallelism:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Concurrency:"})," Dealing with multiple tasks at once (not necessarily simultaneously). It's about the structure of your program."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallelism:"})," Actually executing multiple tasks simultaneously. It's about execution."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Threading Models:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thread-per-request:"})," Traditional model where each request gets its own thread. Simple but doesn't scale well due to thread overhead."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thread Pool:"})," Reuse a fixed number of threads to handle requests. Better resource management."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Loop (Async/Await):"})," Single-threaded event loop that handles I/O operations asynchronously. Very efficient for I/O-bound operations."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"synchronization-mechanisms",children:"Synchronization Mechanisms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Locks (Mutexes):"})," Ensure mutual exclusion when accessing shared resources. Can lead to deadlocks if not used carefully."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Semaphores:"})," Control access to a resource pool (e.g., database connections)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Atomic Operations:"})," Operations that complete fully or not at all, without interruption."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lock-Free Data Structures:"})," High-performance structures that avoid traditional locking using atomic operations and memory ordering."]}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TD\n    subgraph "Traditional Threading"\n        A[Request 1] --\x3e B[Thread 1];\n        C[Request 2] --\x3e D[Thread 2];\n        E[Request 3] --\x3e F[Thread 3];\n        B --\x3e G[Database];\n        D --\x3e G;\n        F --\x3e G;\n    end\n    \n    subgraph "Async/Await Model"\n        H[Request 1] --\x3e I[Event Loop];\n        J[Request 2] --\x3e I;\n        K[Request 3] --\x3e I;\n        I --\x3e L[Async I/O];\n        L --\x3e M[Database];\n    end'}),"\n",(0,i.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prefer Immutability:"})," Immutable objects eliminate many concurrency issues."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimize Shared State:"})," The less state you share between threads, the fewer synchronization issues you'll have."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Higher-Level Abstractions:"})," Modern languages provide abstractions like async/await, actors, or channels that are safer than raw threads."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Deep Dive: Resources",type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601",children:["\ud83d\udcc4 ",(0,i.jsx)(n.strong,{children:"Java Concurrency in Practice"})," by Brian Goetz"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://www.youtube.com/watch?v=hEFs-xU3HCQ",children:["\u25b6\ufe0f ",(0,i.jsx)(n.strong,{children:"Understanding Async/Await"})," (Video)"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://www.brianstorti.com/the-actor-model/",children:["\ud83d\udcc4 ",(0,i.jsx)(n.strong,{children:"The Actor Model in 10 Minutes"})]})}),"\n"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"core-web-security-fundamentals",children:"Core Web Security Fundamentals"}),"\n",(0,i.jsx)(n.p,{children:"Security is not a feature; it's a foundational requirement. A senior developer must proactively identify and mitigate common vulnerabilities."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The OWASP Top 10:"})," This is the essential checklist for web security. It's a standard awareness document for developers and web application security. It represents a broad consensus about the most critical security risks."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-security-vulnerabilities-with-examples",children:"Common Security Vulnerabilities with Examples"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Security vulnerability examples"}),(0,i.jsx)(n.h4,{id:"sql-injection",children:"SQL Injection"}),(0,i.jsx)(n.p,{children:"An attacker can use a web form or URL parameter to send a malicious SQL query."}),(0,i.jsx)(n.h5,{id:"nodejs---dangerous",children:"Node.js - DANGEROUS!"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'\nconst userId = req.query.id; // Attacker sends: "1 OR 1=1; DROP TABLE users; --"\nconst query = `SELECT * FROM users WHERE id = ${userId}`;\ndb.query(query, (err, results) => { /* This could delete your entire table! */ });\n'})}),(0,i.jsx)(n.h5,{id:"python---dangerous",children:"Python - DANGEROUS!"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'\ndef get_user(user_id):\n    query = f"SELECT * FROM users WHERE id = {user_id}"  # Vulnerable to injection\n    cursor.execute(query)\n    return cursor.fetchone()\n'})})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Safe Implementation with Parameterized Queries"}),(0,i.jsx)(n.h4,{id:"nodejs---safe",children:"Node.js - SAFE"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"\nconst userId = req.query.id;\nconst query = 'SELECT * FROM users WHERE id = ?';\ndb.query(query, [userId], (err, results) => {\n    // Database treats userId as a value, not executable code\n});\n"})}),(0,i.jsx)(n.h4,{id:"python---safe",children:"Python - SAFE"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'\ndef get_user(user_id):\n    query = "SELECT * FROM users WHERE id = %s"\n    cursor.execute(query, (user_id,))  # Parameterized query prevents injection\n    return cursor.fetchone()\n'})}),(0,i.jsx)(n.h4,{id:"c-entity-framework---safe",children:"C# Entity Framework - SAFE"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"\npublic async Task<User> GetUserAsync(int userId)\n{\n    return await _context.Users\n        .Where(u => u.Id == userId)  // EF Core uses parameterized queries automatically\n        .FirstOrDefaultAsync();\n}\n"})})]}),"\n",(0,i.jsx)(n.h4,{id:"cross-site-scripting-xss-prevention",children:"Cross-Site Scripting (XSS) Prevention"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// \u274c Vulnerable to XSS\napp.get(\'/user/:id\', (req, res) => {\n    const userInput = req.params.id;\n    res.send(`<h1>User: ${userInput}</h1>`); // Raw HTML insertion\n});\n\n// \u2705 Safe: HTML escaping\nconst escapeHtml = (unsafe) => {\n    return unsafe\n        .replace(/&/g, "&amp;")\n        .replace(/</g, "&lt;")\n        .replace(/>/g, "&gt;")\n        .replace(/"/g, "&quot;")\n        .replace(/\'/g, "&#039;");\n};\n\napp.get(\'/user/:id\', (req, res) => {\n    const userInput = escapeHtml(req.params.id);\n    res.send(`<h1>User: ${userInput}</h1>`); // Escaped output\n});\n'})}),"\n",(0,i.jsx)(n.h4,{id:"input-validation-example",children:"Input Validation Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Java with Bean Validation\npublic class UserRegistrationRequest {\n    @NotBlank(message = "Email is required")\n    @Email(message = "Email should be valid")\n    private String email;\n    \n    @NotBlank(message = "Password is required")\n    @Size(min = 8, max = 100, message = "Password must be between 8 and 100 characters")\n    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]", \n             message = "Password must contain uppercase, lowercase, digit and special character")\n    private String password;\n    \n    // getters and setters\n}\n\n@PostMapping("/register")\npublic ResponseEntity<?> register(@Valid @RequestBody UserRegistrationRequest request) {\n    // Validation happens automatically due to @Valid annotation\n    // If validation fails, Spring returns 400 Bad Request with error details\n    return userService.registerUser(request);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"By using parameterized queries and proper input validation, you create multiple layers of defense against common attacks."}),"\n",(0,i.jsx)(n.admonition,{title:"Deep Dive: Resources",type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://owasp.org/www-project-top-ten/",children:["\ud83d\udcc4 ",(0,i.jsx)(n.strong,{children:"OWASP Top 10"})," (Official Site)"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://www.youtube.com/playlist?list=PL590L5WQmH8dsxxz7ooJAgmijwOz0me20",children:["\u25b6\ufe0f ",(0,i.jsx)(n.strong,{children:"Web Security 101"})," (Video Playlist by Google)"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://cheatsheetseries.owasp.org/",children:["\ud83d\udcc4 ",(0,i.jsx)(n.strong,{children:"OWASP Cheatsheet Series"})]})}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);