"use strict";(self.webpackChunkroadmap=self.webpackChunkroadmap||[]).push([[6494],{9005:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"ddd-csharp","title":"Domain-Driven Design (DDD) in C#","description":"A practical, end-to-end guide to applying DDD in C# with examples, diagrams, and references.","source":"@site/guides/ddd-csharp.mdx","sourceDirName":".","slug":"/ddd-csharp","permalink":"/roadmap/guides/ddd-csharp","draft":false,"unlisted":false,"editUrl":"https://github.com/alishahidi/roadmap/tree/main/guides/ddd-csharp.mdx","tags":[],"version":"current","frontMatter":{"id":"ddd-csharp","title":"Domain-Driven Design (DDD) in C#","description":"A practical, end-to-end guide to applying DDD in C# with examples, diagrams, and references.","slug":"/ddd-csharp"},"sidebar":"guidesSidebar"}');var a=r(4848),t=r(8453);r(6540),r(2303);const s={id:"ddd-csharp",title:"Domain-Driven Design (DDD) in C#",description:"A practical, end-to-end guide to applying DDD in C# with examples, diagrams, and references.",slug:"/ddd-csharp"},d=void 0,c={},o=[{value:"What you will learn",id:"what-you-will-learn",level:3},{value:"Core concepts",id:"core-concepts",level:2},{value:"Big picture",id:"big-picture",level:2},{value:"Context mapping",id:"context-mapping",level:2},{value:"Example domain: Orders",id:"example-domain-orders",level:2},{value:"Value objects",id:"value-objects",level:3},{value:"Aggregate",id:"aggregate",level:3},{value:"Repository interface",id:"repository-interface",level:3},{value:"EF Core mapping (infrastructure)",id:"ef-core-mapping-infrastructure",level:3},{value:"Application service (command handler)",id:"application-service-command-handler",level:3},{value:"Flow: placing an order",id:"flow-placing-an-order",level:3},{value:"CQRS (optional)",id:"cqrs-optional",level:2},{value:"Testing strategy",id:"testing-strategy",level:2},{value:"Guidelines and checklists",id:"guidelines-and-checklists",level:2},{value:"References",id:"references",level:2},{value:"Production-grade architecture",id:"production-grade-architecture",level:2},{value:"Recommended solution structure (C#)",id:"recommended-solution-structure-c",level:3},{value:"Layered architecture responsibilities",id:"layered-architecture-responsibilities",level:3},{value:"CQRS in depth",id:"cqrs-in-depth",level:2},{value:"Command model",id:"command-model",level:3},{value:"Query model",id:"query-model",level:3},{value:"Building the read model (projection)",id:"building-the-read-model-projection",level:3},{value:"DDD + CQRS integration patterns",id:"ddd--cqrs-integration-patterns",level:2},{value:"Outbox pattern (transactional messaging)",id:"outbox-pattern-transactional-messaging",level:3},{value:"Idempotency for consumers",id:"idempotency-for-consumers",level:3},{value:"Optimistic concurrency",id:"optimistic-concurrency",level:3},{value:"Sagas (process managers)",id:"sagas-process-managers",level:3},{value:"Security, validation, and policies",id:"security-validation-and-policies",level:2},{value:"Observability",id:"observability",level:2},{value:"Deployment and operations",id:"deployment-and-operations",level:2},{value:"Production checklist",id:"production-checklist",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"A concise, practical guide to DDD with C# examples. Large code listings are collapsed by default for easy reading."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"what-you-will-learn",children:"What you will learn"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Understand DDD essentials: ubiquitous language, bounded contexts, aggregates, and domain events."}),"\n",(0,a.jsx)(n.li,{children:"Design an order domain in C# with entities, value objects, repositories, and application services."}),"\n",(0,a.jsx)(n.li,{children:"Apply a layered architecture and optional CQRS."}),"\n",(0,a.jsx)(n.li,{children:"Visualize flows with Mermaid diagrams."}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"This guide focuses on pragmatic DDD for typical service-backed systems. It balances rigor with practicality."})}),"\n",(0,a.jsx)(n.h2,{id:"core-concepts",children:"Core concepts"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Ubiquitous Language"}),": Shared terms between domain experts and developers."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Bounded Context"}),": A semantic boundary around a model. Integrations occur at the boundaries."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Entity"}),": Has identity and lifecycle. Example: ",(0,a.jsx)(n.code,{children:"Order"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Value Object"}),": Immutable, equality by value. Example: ",(0,a.jsx)(n.code,{children:"Money"}),", ",(0,a.jsx)(n.code,{children:"Address"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Aggregate"}),": A cluster of entities/value objects with a single root (e.g., ",(0,a.jsx)(n.code,{children:"Order"})," as root). Invariants are enforced inside the aggregate."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Domain Event"}),": Something that happened in the domain (e.g., ",(0,a.jsx)(n.code,{children:"OrderPlaced"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Repository"}),": Collection-like interface to persist aggregates."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"big-picture",children:"Big picture"}),"\n",(0,a.jsx)(n.mermaid,{value:"graph TB\n  subgraph UI[Interfaces]\n    A[API / Controllers]\n  end\n  subgraph App[Application Layer]\n    B[Commands / Queries]\n    C[Services / Handlers]\n  end\n  subgraph Domain[Domain Layer]\n    D[Aggregates]\n    E[Domain Services]\n    F[Domain Events]\n    G[Value Objects]\n  end\n  subgraph Infra[Infrastructure]\n    H[EF Core / Repos]\n    I[Messaging]\n  end\n\n  A --\x3e B --\x3e C --\x3e D\n  D --\x3e F\n  C <--\x3e|Repo| H\n  C --\x3e I"}),"\n",(0,a.jsx)(n.h2,{id:"context-mapping",children:"Context mapping"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n  OM[Order Mgmt] -- events --\x3e PM[Payment]\n  OM -- REST --\x3e INV[Inventory]\n  OM -- async messages --\x3e SHIP[Shipping]"}),"\n",(0,a.jsx)(n.h2,{id:"example-domain-orders",children:"Example domain: Orders"}),"\n",(0,a.jsx)(n.p,{children:"We will model a minimal Order domain:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Aggregate Root"}),": ",(0,a.jsx)(n.code,{children:"Order"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Child Entity"}),": ",(0,a.jsx)(n.code,{children:"OrderItem"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Value Objects"}),": ",(0,a.jsx)(n.code,{children:"Money"}),", ",(0,a.jsx)(n.code,{children:"ProductId"}),", ",(0,a.jsx)(n.code,{children:"OrderId"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Domain Events"}),": ",(0,a.jsx)(n.code,{children:"OrderPlaced"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Repository"}),": ",(0,a.jsx)(n.code,{children:"IOrderRepository"})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"value-objects",children:"Value objects"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Base ValueObject and Money"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using System.Collections.Generic;\nusing System.Linq;\n\npublic abstract class ValueObject\n{\n    protected abstract IEnumerable<object?> GetEqualityComponents();\n\n    public override bool Equals(object? obj)\n    {\n        if (obj is null || obj.GetType() != GetType()) return false;\n        var other = (ValueObject)obj;\n        return GetEqualityComponents().SequenceEqual(other.GetEqualityComponents());\n    }\n\n    public override int GetHashCode()\n    {\n        return GetEqualityComponents()\n            .Aggregate(0, (hash, component) =>\n                HashCode.Combine(hash, component?.GetHashCode() ?? 0));\n    }\n}\n\npublic sealed class Money : ValueObject\n{\n    public decimal Amount { get; }\n    public string Currency { get; }\n\n    private Money(decimal amount, string currency)\n    {\n        if (amount < 0) throw new ArgumentOutOfRangeException(nameof(amount));\n        if (string.IsNullOrWhiteSpace(currency)) throw new ArgumentException("Currency required");\n        Amount = decimal.Round(amount, 2);\n        Currency = currency.ToUpperInvariant();\n    }\n\n    public static Money Of(decimal amount, string currency) => new(amount, currency);\n\n    protected override IEnumerable<object?> GetEqualityComponents()\n    {\n        yield return Amount;\n        yield return Currency;\n    }\n\n    public static Money operator +(Money a, Money b)\n    {\n        if (a.Currency != b.Currency) throw new InvalidOperationException("Currency mismatch");\n        return Of(a.Amount + b.Amount, a.Currency);\n    }\n}\n'})})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Identifiers as Value Objects"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public sealed class OrderId : ValueObject\n{\n    public Guid Value { get; }\n    private OrderId(Guid value) => Value = value;\n    public static OrderId New() => new(Guid.NewGuid());\n    public static OrderId From(Guid value) => new(value);\n    protected override IEnumerable<object?> GetEqualityComponents() { yield return Value; }\n    public override string ToString() => Value.ToString();\n}\n\npublic sealed class ProductId : ValueObject\n{\n    public Guid Value { get; }\n    private ProductId(Guid value) => Value = value;\n    public static ProductId From(Guid value) => new(value);\n    protected override IEnumerable<object?> GetEqualityComponents() { yield return Value; }\n    public override string ToString() => Value.ToString();\n}\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"aggregate",children:"Aggregate"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Order aggregate with invariants and events"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public sealed class Order\n{\n    private readonly List<OrderItem> _items = new();\n    private readonly List<object> _domainEvents = new();\n\n    public OrderId Id { get; }\n    public string CustomerEmail { get; private set; }\n    public IReadOnlyCollection<OrderItem> Items => _items.AsReadOnly();\n    public Money Total => _items.Aggregate(Money.Of(0, Currency), (acc, i) => acc + (i.UnitPrice * i.Quantity));\n    public string Currency { get; }\n\n    private Order(OrderId id, string customerEmail, string currency)\n    {\n        Id = id;\n        CustomerEmail = customerEmail;\n        Currency = currency;\n    }\n\n    public static Order CreateDraft(string customerEmail, string currency)\n    {\n        if (string.IsNullOrWhiteSpace(customerEmail)) throw new ArgumentException("Email required");\n        return new Order(OrderId.New(), customerEmail, currency);\n    }\n\n    public void AddItem(ProductId productId, int quantity, Money unitPrice)\n    {\n        if (quantity <= 0) throw new ArgumentOutOfRangeException(nameof(quantity));\n        if (unitPrice.Currency != Currency) throw new InvalidOperationException("Currency mismatch");\n\n        var existing = _items.FirstOrDefault(i => i.ProductId.Equals(productId));\n        if (existing is not null)\n        {\n            existing.IncreaseQuantity(quantity);\n        }\n        else\n        {\n            _items.Add(new OrderItem(productId, quantity, unitPrice));\n        }\n    }\n\n    public void Place()\n    {\n        if (!_items.Any()) throw new InvalidOperationException("Cannot place empty order");\n        _domainEvents.Add(new OrderPlaced(Id, Total));\n    }\n\n    public IReadOnlyCollection<object> DequeueDomainEvents()\n    {\n        var copy = _domainEvents.ToArray();\n        _domainEvents.Clear();\n        return copy;\n    }\n}\n\npublic sealed class OrderItem\n{\n    public ProductId ProductId { get; }\n    public int Quantity { get; private set; }\n    public Money UnitPrice { get; }\n\n    public OrderItem(ProductId productId, int quantity, Money unitPrice)\n    {\n        if (quantity <= 0) throw new ArgumentOutOfRangeException(nameof(quantity));\n        ProductId = productId;\n        Quantity = quantity;\n        UnitPrice = unitPrice;\n    }\n\n    public void IncreaseQuantity(int by)\n    {\n        if (by <= 0) throw new ArgumentOutOfRangeException(nameof(by));\n        Quantity += by;\n    }\n}\n\npublic sealed record OrderPlaced(OrderId OrderId, Money Total);\n'})})]}),"\n",(0,a.jsx)(n.h3,{id:"repository-interface",children:"Repository interface"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public interface IOrderRepository\n{\n    Task<Order?> GetAsync(OrderId id, CancellationToken ct = default);\n    Task AddAsync(Order order, CancellationToken ct = default);\n    Task SaveChangesAsync(CancellationToken ct = default);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"ef-core-mapping-infrastructure",children:"EF Core mapping (infrastructure)"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"DbContext and ValueConverters"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\n\npublic sealed class OrdersDbContext : DbContext\n{\n    public DbSet<Order> Orders => Set<Order>();\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        var orderIdConv = new ValueConverter<OrderId, Guid>(v => v.Value, v => OrderId.From(v));\n        var productIdConv = new ValueConverter<ProductId, Guid>(v => v.Value, v => ProductId.From(v));\n\n        modelBuilder.Entity<Order>(b =>\n        {\n            b.HasKey(x => x.Id);\n            b.Property(x => x.Id).HasConversion(orderIdConv);\n            b.Property(x => x.CustomerEmail).IsRequired();\n            b.Property(x => x.Currency).IsRequired();\n\n            b.OwnsMany<OrderItem>("_items", nb =>\n            {\n                nb.WithOwner().HasForeignKey("OrderId");\n                nb.Property<Guid>("Id").ValueGeneratedOnAdd();\n                nb.HasKey("Id");\n                nb.Property(i => i.ProductId).HasConversion(productIdConv);\n                nb.OwnsOne(i => i.UnitPrice, mb =>\n                {\n                    mb.Property(p => p.Amount).HasColumnName("UnitPriceAmount");\n                    mb.Property(p => p.Currency).HasColumnName("UnitPriceCurrency");\n                });\n            });\n        });\n    }\n}\n'})})]}),"\n",(0,a.jsx)(n.h3,{id:"application-service-command-handler",children:"Application service (command handler)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public sealed record PlaceOrderCommand(string CustomerEmail, string Currency, IReadOnlyCollection<(Guid ProductId, int Quantity, decimal UnitPrice)> Lines);\n\npublic sealed class PlaceOrderHandler\n{\n    private readonly IOrderRepository _orders;\n\n    public PlaceOrderHandler(IOrderRepository orders) => _orders = orders;\n\n    public async Task<OrderId> Handle(PlaceOrderCommand cmd, CancellationToken ct)\n    {\n        var order = Order.CreateDraft(cmd.CustomerEmail, cmd.Currency);\n\n        foreach (var l in cmd.Lines)\n        {\n            order.AddItem(ProductId.From(l.ProductId), l.Quantity, Money.Of(l.UnitPrice, cmd.Currency));\n        }\n\n        order.Place();\n        await _orders.AddAsync(order, ct);\n\n        // Optionally publish domain events here\n        foreach (var e in order.DequeueDomainEvents())\n        {\n            // publish e\n        }\n\n        await _orders.SaveChangesAsync(ct);\n        return order.Id;\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"flow-placing-an-order",children:"Flow: placing an order"}),"\n",(0,a.jsx)(n.mermaid,{value:"sequenceDiagram\n  actor User\n  participant API as API\n  participant App as PlaceOrderHandler\n  participant Dom as Order Aggregate\n  participant Repo as OrderRepository\n\n  User->>API: POST /orders\n  API->>App: PlaceOrderCommand\n  App->>Dom: CreateDraft + AddItem + Place\n  Dom--\x3e>App: DomainEvents (OrderPlaced)\n  App->>Repo: AddAsync + SaveChangesAsync\n  App--\x3e>API: OrderId"}),"\n",(0,a.jsx)(n.h2,{id:"cqrs-optional",children:"CQRS (optional)"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Commands"})," mutate state through aggregates."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Queries"})," read from optimized read models (e.g., SQL view or denormalized table)."]}),"\n",(0,a.jsx)(n.li,{children:"Keep the domain model clean; avoid exposing EF Core internals to the application layer."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"testing-strategy",children:"Testing strategy"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Test invariants in the aggregate (unit tests on ",(0,a.jsx)(n.code,{children:"Order"}),")."]}),"\n",(0,a.jsx)(n.li,{children:"Test application services with a fake repository."}),"\n",(0,a.jsx)(n.li,{children:"Integration-test repositories with a real DB and EF Core."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"guidelines-and-checklists",children:"Guidelines and checklists"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Prefer small, cohesive aggregates. Design for consistency boundaries."}),"\n",(0,a.jsx)(n.li,{children:"Enforce invariants inside aggregates, not in controllers."}),"\n",(0,a.jsx)(n.li,{children:"Make value objects immutable and validate on creation."}),"\n",(0,a.jsx)(n.li,{children:"Use domain events to decouple side-effects like notifications."}),"\n",(0,a.jsx)(n.li,{children:"Repositories return full aggregates; do not leak ORM entities."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:['Eric Evans, "Domain-Driven Design: Tackling Complexity in the Heart of Software" \u2014 ',(0,a.jsx)(n.a,{href:"https://www.pearson.com/en-us/subject-catalog/p/domain-driven-design-tackling-complexity-in-the-heart-of-software/P200000003283/9780321125217",children:"Addison-Wesley"})]}),"\n",(0,a.jsxs)(n.li,{children:['Vaughn Vernon, "Implementing Domain-Driven Design" \u2014 ',(0,a.jsx)(n.a,{href:"https://www.pearson.com/en-us/subject-catalog/p/implementing-domain-driven-design/P200000002945/9780321834577",children:"Addison-Wesley"})]}),"\n",(0,a.jsxs)(n.li,{children:['Vaughn Vernon, "DDD Reference" \u2014 ',(0,a.jsx)(n.a,{href:"https://dddcommunity.org/library/vernon_2011/",children:"dddcommunity.org"})]}),"\n",(0,a.jsxs)(n.li,{children:['Microsoft Learn, "DDD and Microservices" \u2014 ',(0,a.jsx)(n.a,{href:"https://learn.microsoft.com/azure/architecture/microservices/model/domain-analysis",children:"learn.microsoft.com"})]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"Need more examples? Open an issue with a scenario and we can extend this guide."}),"\n",(0,a.jsx)(n.h2,{id:"production-grade-architecture",children:"Production-grade architecture"}),"\n",(0,a.jsx)(n.h3,{id:"recommended-solution-structure-c",children:"Recommended solution structure (C#)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"src/\n  OrderService.Api/                # ASP.NET Core minimal APIs or Controllers\n  OrderService.Application/        # Commands, Queries, Handlers, DTOs\n  OrderService.Domain/             # Aggregates, ValueObjects, Domain Events, Repositories\n  OrderService.Infrastructure/     # EF Core, Outbox, Repositories, Messaging, DI\ntests/\n  OrderService.UnitTests/          # Aggregate and VO tests\n  OrderService.IntegrationTests/   # Repos, outbox, projections\n"})}),"\n",(0,a.jsx)(n.h3,{id:"layered-architecture-responsibilities",children:"Layered architecture responsibilities"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"API"}),": HTTP endpoints, authentication, request validation, mapping to commands/queries."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Application"}),": Orchestrates use cases; coordinates repositories and domain; no HTTP/EF code."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Domain"}),": Pure model and invariants; no infrastructure."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Infrastructure"}),": EF Core, message broker client, outbox, background workers."]}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart TB\n  UI[API] --\x3e APP[Application]\n  APP --\x3e DOM[Domain]\n  APP <--\x3e REPO[Repositories]\n  REPO --\x3e DB[(Write DB)]\n  APP --\x3e OUTBOX[Outbox]\n  OUTBOX --\x3e MQ[(Message Broker)]\n  MQ --\x3e PROJ[Projections]\n  PROJ --\x3e READDB[(Read DB)]\n  UI --\x3e QRY[Queries] --\x3e READDB"}),"\n",(0,a.jsx)(n.h2,{id:"cqrs-in-depth",children:"CQRS in depth"}),"\n",(0,a.jsx)(n.h3,{id:"command-model",children:"Command model"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Commands change state via aggregates; validated at the boundary."}),"\n",(0,a.jsx)(n.li,{children:"Handlers persist via repositories and emit domain events."}),"\n"]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Command with validation and handler"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public sealed record AddItemToOrderCommand(Guid OrderId, Guid ProductId, int Quantity, decimal UnitPrice, string Currency);\n\npublic sealed class AddItemToOrderHandler\n{\n    private readonly IOrderRepository _orders;\n\n    public AddItemToOrderHandler(IOrderRepository orders) => _orders = orders;\n\n    public async Task Handle(AddItemToOrderCommand cmd, CancellationToken ct)\n    {\n        if (cmd.Quantity <= 0) throw new ArgumentOutOfRangeException(nameof(cmd.Quantity));\n        var order = await _orders.GetAsync(OrderId.From(cmd.OrderId), ct)\n                     ?? throw new InvalidOperationException("Order not found");\n\n        order.AddItem(ProductId.From(cmd.ProductId), cmd.Quantity, Money.Of(cmd.UnitPrice, cmd.Currency));\n        await _orders.SaveChangesAsync(ct);\n    }\n}\n'})})]}),"\n",(0,a.jsx)(n.h3,{id:"query-model",children:"Query model"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Queries read from a denormalized read model for performance."}),"\n",(0,a.jsx)(n.li,{children:"Use Dapper or EF Core to query a read database/schema."}),"\n"]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Query and handler using Dapper"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public sealed record GetOrderSummary(Guid OrderId);\n\npublic sealed class GetOrderSummaryHandler\n{\n    private readonly Func<IDbConnection> _readDb;\n    public GetOrderSummaryHandler(Func<IDbConnection> readDb) => _readDb = readDb;\n\n    public async Task<OrderSummaryDto?> Handle(GetOrderSummary query, CancellationToken ct)\n    {\n        using var conn = _readDb();\n        var sql = @"SELECT Id, CustomerEmail, TotalAmount, Currency, ItemCount\n                    FROM OrdersRead WHERE Id = @Id";\n        return await conn.QuerySingleOrDefaultAsync<OrderSummaryDto>(sql, new { Id = query.OrderId });\n    }\n}\n\npublic sealed record OrderSummaryDto(Guid Id, string CustomerEmail, decimal TotalAmount, string Currency, int ItemCount);\n'})})]}),"\n",(0,a.jsx)(n.h3,{id:"building-the-read-model-projection",children:"Building the read model (projection)"}),"\n",(0,a.jsx)(n.mermaid,{value:"sequenceDiagram\n  participant Dom as Domain\n  participant Out as Outbox\n  participant Pub as Publisher\n  participant Proj as Projection Worker\n  participant RDB as Read DB\n  Dom->>Out: Append domain events\n  Pub->>Proj: Publish OrderPlaced\n  Proj->>RDB: Upsert OrdersRead row"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Projection handler for OrderPlaced"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public sealed class OrderReadProjection\n{\n    private readonly Func<IDbConnection> _readDb;\n    public OrderReadProjection(Func<IDbConnection> readDb) => _readDb = readDb;\n\n    public async Task Handle(OrderPlaced evt, CancellationToken ct)\n    {\n        using var conn = _readDb();\n        var sql = @"INSERT INTO OrdersRead(Id, CustomerEmail, TotalAmount, Currency, ItemCount)\n                    VALUES (@Id, @Email, @Amount, @Currency, @Count)\n                    ON CONFLICT (Id) DO UPDATE SET\n                      TotalAmount = EXCLUDED.TotalAmount,\n                      ItemCount = EXCLUDED.ItemCount"; // PostgreSQL example\n\n        await conn.ExecuteAsync(sql, new {\n            Id = evt.OrderId.Value,\n            Email = "hidden@example.com", // capture at source\n            Amount = evt.Total.Amount,\n            Currency = evt.Total.Currency,\n            Count = 0 // compute from event stream if needed\n        });\n    }\n}\n'})})]}),"\n",(0,a.jsx)(n.h2,{id:"ddd--cqrs-integration-patterns",children:"DDD + CQRS integration patterns"}),"\n",(0,a.jsx)(n.h3,{id:"outbox-pattern-transactional-messaging",children:"Outbox pattern (transactional messaging)"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Persist domain changes and an outbox record in the same transaction."}),"\n",(0,a.jsx)(n.li,{children:"A background publisher dispatches outbox messages to the broker."}),"\n",(0,a.jsx)(n.li,{children:"Ensures at-least-once delivery; combine with idempotent consumers."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n  CMD[Command] --\x3e AGG[Aggregate]\n  AGG --\x3e DB[(Write DB)]\n  AGG --\x3e OB[Outbox Table]\n  OB --\x3e|Background Publisher| MQ[(Message Broker)]\n  MQ --\x3e PROJ[Projection/Consumers]"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Outbox entity and EF Core integration"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public sealed class OutboxMessage\n{\n    public long Id { get; set; }\n    public DateTime OccurredOnUtc { get; set; }\n    public string Type { get; set; } = default!; // e.g., "OrderPlaced"\n    public string Payload { get; set; } = default!; // JSON\n    public DateTime? ProcessedOnUtc { get; set; }\n    public string? Error { get; set; }\n}\n\npublic sealed class OrdersDbContext : DbContext\n{\n    public DbSet<OutboxMessage> Outbox => Set<OutboxMessage>();\n\n    public override async Task<int> SaveChangesAsync(CancellationToken ct = default)\n    {\n        var domainEvents = ChangeTracker.Entries()\n            .Select(e => e.Entity)\n            .OfType<Order>()\n            .SelectMany(o => o.DequeueDomainEvents())\n            .ToList();\n\n        foreach (var evt in domainEvents)\n        {\n            Outbox.Add(new OutboxMessage\n            {\n                OccurredOnUtc = DateTime.UtcNow,\n                Type = evt.GetType().Name,\n                Payload = JsonSerializer.Serialize(evt)\n            });\n        }\n\n        return await base.SaveChangesAsync(ct);\n    }\n}\n'})})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Background publisher (idempotent)"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public sealed class OutboxPublisher : BackgroundService\n{\n    private readonly IServiceProvider _services;\n    private readonly IMessageBus _bus; // abstraction over broker client\n\n    public OutboxPublisher(IServiceProvider services, IMessageBus bus)\n    {\n        _services = services;\n        _bus = bus;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            using var scope = _services.CreateScope();\n            var db = scope.ServiceProvider.GetRequiredService<OrdersDbContext>();\n\n            var batch = await db.Outbox\n                .Where(x => x.ProcessedOnUtc == null)\n                .OrderBy(x => x.Id)\n                .Take(100)\n                .ToListAsync(stoppingToken);\n\n            foreach (var msg in batch)\n            {\n                try\n                {\n                    await _bus.PublishAsync(msg.Type, msg.Payload, stoppingToken);\n                    msg.ProcessedOnUtc = DateTime.UtcNow;\n                }\n                catch (Exception ex)\n                {\n                    msg.Error = ex.Message;\n                }\n            }\n\n            await db.SaveChangesAsync(stoppingToken);\n            await Task.Delay(TimeSpan.FromSeconds(1), stoppingToken);\n        }\n    }\n}\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"idempotency-for-consumers",children:"Idempotency for consumers"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Add a ",(0,a.jsx)(n.code,{children:"ProcessedMessages"})," table keyed by ",(0,a.jsx)(n.code,{children:"MessageId"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["On consume, insert the ",(0,a.jsx)(n.code,{children:"MessageId"})," first; if duplicate, skip handling."]}),"\n"]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Idempotent consumer skeleton"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public sealed class OrderPlacedConsumer\n{\n    private readonly Func<IDbConnection> _readDb;\n\n    public async Task Handle(string messageId, OrderPlaced evt, CancellationToken ct)\n    {\n        using var conn = _readDb();\n        using var tx = conn.BeginTransaction();\n\n        var inserted = await conn.ExecuteAsync(\n            "INSERT INTO ProcessedMessages(MessageId) VALUES (@Id) ON CONFLICT DO NOTHING",\n            new { Id = messageId }, tx);\n\n        if (inserted == 0) return; // already processed\n\n        // apply projection changes here\n        await tx.CommitAsync();\n    }\n}\n'})})]}),"\n",(0,a.jsx)(n.h3,{id:"optimistic-concurrency",children:"Optimistic concurrency"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use a ",(0,a.jsx)(n.code,{children:"RowVersion"})," column to detect concurrent updates."]}),"\n",(0,a.jsx)(n.li,{children:"On conflict, reload and retry or return 409 Conflict."}),"\n"]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"EF Core concurrency token"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public sealed class Order\n{\n    // ... existing members ...\n    public byte[] RowVersion { get; private set; } = Array.Empty<byte>();\n}\n\npublic sealed class OrdersDbContext : DbContext\n{\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Order>(b =>\n        {\n            b.Property(x => x.RowVersion).IsRowVersion();\n            // other mapping\n        });\n    }\n}\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"sagas-process-managers",children:"Sagas (process managers)"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Coordinate multi-step, long-running workflows across bounded contexts."}),"\n",(0,a.jsx)(n.li,{children:"Persist saga state; react to events; send commands."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"sequenceDiagram\n  participant OM as Orders\n  participant PM as Payment\n  participant SH as Shipping\n  participant SG as Saga\n  OM->>SG: OrderPlaced\n  SG->>PM: ChargePayment\n  PM--\x3e>SG: PaymentSucceeded\n  SG->>SH: ArrangeShipment\n  SH--\x3e>SG: Shipped\n  SG--\x3e>OM: MarkCompleted"}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Saga state and transitions (simplified)"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public enum OrderSagaStatus { Started, Paid, Shipped, Completed, Failed }\n\npublic sealed class OrderSaga\n{\n    public Guid Id { get; init; }\n    public OrderId OrderId { get; init; } = default!;\n    public OrderSagaStatus Status { get; private set; }\n\n    public void When(OrderPlaced e) { Status = OrderSagaStatus.Started; }\n    public IEnumerable<object> When(PaymentSucceeded e) { Status = OrderSagaStatus.Paid; yield return new ArrangeShipment(e.OrderId); }\n    public void When(Shipped e) { Status = OrderSagaStatus.Shipped; }\n}\n"})})]}),"\n",(0,a.jsx)(n.h2,{id:"security-validation-and-policies",children:"Security, validation, and policies"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Authentication/Authorization at API boundary (JWT, OAuth2)."}),"\n",(0,a.jsx)(n.li,{children:"Request validation (FluentValidation) before commands."}),"\n",(0,a.jsx)(n.li,{children:"Resilience policies (Polly) for external calls."}),"\n",(0,a.jsx)(n.li,{children:"PII handling: avoid leaking sensitive data into events/read models."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"observability",children:"Observability"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Correlation/causation IDs on commands and events."}),"\n",(0,a.jsx)(n.li,{children:"Structured logging with scopes per request/command."}),"\n",(0,a.jsx)(n.li,{children:"Metrics: command latency, handler success/failure, outbox backlog, consumer lag."}),"\n",(0,a.jsx)(n.li,{children:"Tracing across services (OpenTelemetry)."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"deployment-and-operations",children:"Deployment and operations"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Zero-downtime migrations for write and read models."}),"\n",(0,a.jsx)(n.li,{children:"Blue/green or canary for services publishing new events."}),"\n",(0,a.jsx)(n.li,{children:"Backpressure: cap publisher batch size and consumer concurrency."}),"\n",(0,a.jsx)(n.li,{children:"Dead-letter queues and retry policies for message processing."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"production-checklist",children:"Production checklist"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Clear bounded contexts and contracts at boundaries."}),"\n",(0,a.jsx)(n.li,{children:"Aggregates small and cohesive; invariants enforced inside."}),"\n",(0,a.jsx)(n.li,{children:"Outbox enabled with background publisher."}),"\n",(0,a.jsx)(n.li,{children:"Consumers idempotent; dedup table in place."}),"\n",(0,a.jsx)(n.li,{children:"Read model projections cover all critical queries; rebuild procedure documented."}),"\n",(0,a.jsx)(n.li,{children:"Concurrency conflicts handled with retry or 409."}),"\n",(0,a.jsx)(n.li,{children:"Comprehensive tests (unit, integration, contract, e2e)."}),"\n",(0,a.jsx)(n.li,{children:"Observability: logs, metrics, traces wired."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);